Start

    Import json
    Import datetime

    FUNCTION intInput(inputMessage, errorMessage)
        WHILE no valid input is given DO
            Ask the user for a Input
            convert input to an integer
            IF input is not an integer
                PRINT error message
            ELSE
                RETURN the integer
            End IF
        END WHILE
    END FUNCTION

    FUNCTION floatInput(inputMessage, errorMessage)
        WHILE no valid input is given DO
            Ask the user for a Input
            convert input to a float
            IF input is not a float
                PRINT error message
            ELSE
                RETURN the integer
            End IF
        END WHILE
    END FUNCTION

    FUNCTION dateInput()
        While valid date Input not given DO
            Ask the user for a date Input
            TRY to parse input as date in 'yyyy-mm-dd' format
            IF input is not a valid date
                PRINT error message
            ELSE
                RETURN the date string
            END IF
        END WHILE
    END FUNCTION

    Function amountInput():
        Loop until valid input is received
            Call floatInput() function to prompt user for transaction amount
            Split the transaction amount to check for fractional part
            If amount is greater than 0 and fractional part has less than 3 digits
                Format amount to have exactly two decimal places
                Return formatted amount string
                Break out of loop
            Else
                print error message and continue Loop
    END FUNCTION

    FUNCTION loadTransactions()
        TRY to open 'transactions.json' file for reading
        IF file not found 
            PRINT error message and RETURN False
        ELSE IF error decoding JSON data
            PRINT error message and RETURN False
        END IF
        IF no transactions or error, 
            RETURN NONE
        ELSE 
            RETURN transactions
        END IF
        CLOSE file
    END FUNCTION

    FUNCTION saveTransactions(transactions)
        OPEN 'transactions.json' file for writing
        WRITE transactions data to file in JSON format
        CLOSE file
    END FUNCTION

    FUNCTION read_bulk_transactions_from_file(filename, transactions)
        IF transactions == None THEN
            transactions = {}
        END IF
        TRY OPEN filename in read mode
            FOR EACH line IN file DO
                Add transactions to the dictionary
            END FOR
            TRUNCATE the file
        EXCEPT FileNotFoundError
            PRINT "transactions.txt file not found."
        ELSE
            saveTransactions(transactions)
            PRINT success message
    END FUNCTION


    FUNCTION returnToMainMenu()
        WHILE valid input for choice is not given DO
            PRINT option for returning to main menu or exiting program
            PROMPT user for choice
            IF choice is to return to main menu
                PRINT main menu message 
                mainMenu()
            ELSE IF choice is to exit program, 
                PRINT exit message 
                EXIT program
            ELSE 
                PRINT error message and CONTINUE loop
        END WHILE
    END FUNCTION

    FUNCTION addTransaction()
        transactions = loadTransactions()
        IF no transactions
            INITIALIZE empty dictionary called transactions
        End IF
        IF user wants add a transaction
            PROMPT user for transaction details (amount, category, date)
            VALIDATE input for amount, category, and date 
            Check whether category is in the the dictonary
            If the category is in the dictonary
                Add the new transcation datails as a value
            ELSE
                create a new key in the dictionary for the category
                Add the new transcation datails as a value
            SAVE updated transactions to file
            PRINT success message
        IF user wants to add bulk of transactions
            ask the user for the filename
            read_bulk_transactions_from_file(filename, transactions)
    END FUNCTION

    FUNCTION viewTransactions(topic)
        transactions = loadTransactions() 
        IF no transactions
            PRINT error message and RETURN False
        ELSE
            PRINT topic
            PRINT table header
            LOOP through transactions 
                PRINT each transaction under their category with a unique index as ID
            END LOOP
            PRINT all transactions loaded
            RETURN transactions list
        END IF
    END FUNCTION

    FUNCTION updateConf(transactions, ID, ChangeID, value, message)
        WHILE no valid input is given DO
            PROMPT user for confirmation to update transaction
            IF yes
                UPDATE transaction with new value
                SAVE updated transactions to file
                PRINT success message
            ELSE 
                PRINT cancellation message
            END IF
        END While
    END FUNCTION

    FUNCTION updateTransaction()
        CALL viewTransactions() to display transactions
        PROMPT user for transaction category and ID to update
        IF ID and transaction category is valid
            PRINT current transaction details
            LOOP the code for user to update data
                PROMPT user for which detail to update (amount, category, type, date)
                IF detail is amount:
                    PROMPT for new amount and UPDATE
                    updateConf()
                ELSE IF detail is date:
                    PROMPT for new date and UPDATE
                    updateConf()
                END IF
                PROMPT user for further updates or exit
                IF yes
                    CONTINUE the loop
                ELSE
                    END loop
        ELSE
            Ask for a valid ID
    END FUNCTION

    FUNCTION deleteTransaction()
        CALL viewTransactions() to display transactions
        WHILE
            PROMPT user for transaction type and ID to delete
            IF Type and ID is valid
                PRINT current transaction details
                PROMPT user for confirmation to delete transaction
                IF yes:
                    DELETE transaction from list
                    SAVE updated transactions to file
                    PRINT success message
                ELSE 
                    PRINT cancellation message
                END IF
                END LOOP
            ELSE
                continue the LOOP
    END FUNCTION 

    FUNCTION displaySummary()
        transactions = loadTransactions()
        IF no transactions
            PRINT error message
            returnToMainMenu()
        ELSE
            LOOP through transactions
                Print the transaction category
                Print the totall number of transactions under that category
                Print the totall value of transactions under that category
            END LOOP
        END IF
    END FUNCTION

    FUNCTION menuChoice()
        LOOP UNTIL valid choice is made
            PRINT main menu options
            PROMPT user for choice
            IF choice is valid
                CALL corresponding function
                END LOOP
            ELSE
                PRINT error message and CONTINUE loop
            END IF
    END FUNCTION

    FUNCTION mainMenu()
        PRINT main menu options
        menuChoice()
    END FUNCTION

    IF script is executed directly
        mainMenu()
    END IF

END